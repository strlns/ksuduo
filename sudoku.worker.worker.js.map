{"version":3,"sources":["webpack://ksuduo/./node_modules/@mattflow/sudoku-solver/index.js","webpack://ksuduo/webpack/bootstrap","webpack://ksuduo/./src/model/CellData.ts","webpack://ksuduo/./src/utility/assert.ts","webpack://ksuduo/./src/utility/arrayChunk.ts","webpack://ksuduo/./src/model/BlockData.ts","webpack://ksuduo/./node_modules/lodash-es/_listCacheClear.js","webpack://ksuduo/./node_modules/lodash-es/eq.js","webpack://ksuduo/./node_modules/lodash-es/_assocIndexOf.js","webpack://ksuduo/./node_modules/lodash-es/_listCacheDelete.js","webpack://ksuduo/./node_modules/lodash-es/_ListCache.js","webpack://ksuduo/./node_modules/lodash-es/_listCacheGet.js","webpack://ksuduo/./node_modules/lodash-es/_listCacheHas.js","webpack://ksuduo/./node_modules/lodash-es/_listCacheSet.js","webpack://ksuduo/./node_modules/lodash-es/_freeGlobal.js","webpack://ksuduo/./node_modules/lodash-es/_root.js","webpack://ksuduo/./node_modules/lodash-es/_Symbol.js","webpack://ksuduo/./node_modules/lodash-es/_getRawTag.js","webpack://ksuduo/./node_modules/lodash-es/_objectToString.js","webpack://ksuduo/./node_modules/lodash-es/_baseGetTag.js","webpack://ksuduo/./node_modules/lodash-es/isObject.js","webpack://ksuduo/./node_modules/lodash-es/isFunction.js","webpack://ksuduo/./node_modules/lodash-es/_coreJsData.js","webpack://ksuduo/./node_modules/lodash-es/_isMasked.js","webpack://ksuduo/./node_modules/lodash-es/_toSource.js","webpack://ksuduo/./node_modules/lodash-es/_baseIsNative.js","webpack://ksuduo/./node_modules/lodash-es/_getNative.js","webpack://ksuduo/./node_modules/lodash-es/_getValue.js","webpack://ksuduo/./node_modules/lodash-es/_Map.js","webpack://ksuduo/./node_modules/lodash-es/_nativeCreate.js","webpack://ksuduo/./node_modules/lodash-es/_hashGet.js","webpack://ksuduo/./node_modules/lodash-es/_hashHas.js","webpack://ksuduo/./node_modules/lodash-es/_Hash.js","webpack://ksuduo/./node_modules/lodash-es/_hashClear.js","webpack://ksuduo/./node_modules/lodash-es/_hashDelete.js","webpack://ksuduo/./node_modules/lodash-es/_hashSet.js","webpack://ksuduo/./node_modules/lodash-es/_getMapData.js","webpack://ksuduo/./node_modules/lodash-es/_isKeyable.js","webpack://ksuduo/./node_modules/lodash-es/_MapCache.js","webpack://ksuduo/./node_modules/lodash-es/_mapCacheClear.js","webpack://ksuduo/./node_modules/lodash-es/_mapCacheDelete.js","webpack://ksuduo/./node_modules/lodash-es/_mapCacheGet.js","webpack://ksuduo/./node_modules/lodash-es/_mapCacheHas.js","webpack://ksuduo/./node_modules/lodash-es/_mapCacheSet.js","webpack://ksuduo/./node_modules/lodash-es/_Stack.js","webpack://ksuduo/./node_modules/lodash-es/_stackClear.js","webpack://ksuduo/./node_modules/lodash-es/_stackDelete.js","webpack://ksuduo/./node_modules/lodash-es/_stackGet.js","webpack://ksuduo/./node_modules/lodash-es/_stackHas.js","webpack://ksuduo/./node_modules/lodash-es/_stackSet.js","webpack://ksuduo/./node_modules/lodash-es/_defineProperty.js","webpack://ksuduo/./node_modules/lodash-es/_baseAssignValue.js","webpack://ksuduo/./node_modules/lodash-es/_assignValue.js","webpack://ksuduo/./node_modules/lodash-es/_copyObject.js","webpack://ksuduo/./node_modules/lodash-es/isObjectLike.js","webpack://ksuduo/./node_modules/lodash-es/_baseIsArguments.js","webpack://ksuduo/./node_modules/lodash-es/isArguments.js","webpack://ksuduo/./node_modules/lodash-es/isArray.js","webpack://ksuduo/./node_modules/lodash-es/isBuffer.js","webpack://ksuduo/./node_modules/lodash-es/stubFalse.js","webpack://ksuduo/./node_modules/lodash-es/_isIndex.js","webpack://ksuduo/./node_modules/lodash-es/isLength.js","webpack://ksuduo/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://ksuduo/./node_modules/lodash-es/_baseUnary.js","webpack://ksuduo/./node_modules/lodash-es/_nodeUtil.js","webpack://ksuduo/./node_modules/lodash-es/isTypedArray.js","webpack://ksuduo/./node_modules/lodash-es/_arrayLikeKeys.js","webpack://ksuduo/./node_modules/lodash-es/_baseTimes.js","webpack://ksuduo/./node_modules/lodash-es/_isPrototype.js","webpack://ksuduo/./node_modules/lodash-es/_overArg.js","webpack://ksuduo/./node_modules/lodash-es/_nativeKeys.js","webpack://ksuduo/./node_modules/lodash-es/_baseKeys.js","webpack://ksuduo/./node_modules/lodash-es/isArrayLike.js","webpack://ksuduo/./node_modules/lodash-es/keys.js","webpack://ksuduo/./node_modules/lodash-es/_baseKeysIn.js","webpack://ksuduo/./node_modules/lodash-es/_nativeKeysIn.js","webpack://ksuduo/./node_modules/lodash-es/keysIn.js","webpack://ksuduo/./node_modules/lodash-es/_cloneBuffer.js","webpack://ksuduo/./node_modules/lodash-es/stubArray.js","webpack://ksuduo/./node_modules/lodash-es/_getSymbols.js","webpack://ksuduo/./node_modules/lodash-es/_arrayFilter.js","webpack://ksuduo/./node_modules/lodash-es/_arrayPush.js","webpack://ksuduo/./node_modules/lodash-es/_getPrototype.js","webpack://ksuduo/./node_modules/lodash-es/_getSymbolsIn.js","webpack://ksuduo/./node_modules/lodash-es/_baseGetAllKeys.js","webpack://ksuduo/./node_modules/lodash-es/_getAllKeys.js","webpack://ksuduo/./node_modules/lodash-es/_getAllKeysIn.js","webpack://ksuduo/./node_modules/lodash-es/_DataView.js","webpack://ksuduo/./node_modules/lodash-es/_Promise.js","webpack://ksuduo/./node_modules/lodash-es/_Set.js","webpack://ksuduo/./node_modules/lodash-es/_WeakMap.js","webpack://ksuduo/./node_modules/lodash-es/_getTag.js","webpack://ksuduo/./node_modules/lodash-es/_initCloneArray.js","webpack://ksuduo/./node_modules/lodash-es/_Uint8Array.js","webpack://ksuduo/./node_modules/lodash-es/_cloneArrayBuffer.js","webpack://ksuduo/./node_modules/lodash-es/_cloneRegExp.js","webpack://ksuduo/./node_modules/lodash-es/_cloneSymbol.js","webpack://ksuduo/./node_modules/lodash-es/_initCloneByTag.js","webpack://ksuduo/./node_modules/lodash-es/_cloneDataView.js","webpack://ksuduo/./node_modules/lodash-es/_cloneTypedArray.js","webpack://ksuduo/./node_modules/lodash-es/_baseCreate.js","webpack://ksuduo/./node_modules/lodash-es/isMap.js","webpack://ksuduo/./node_modules/lodash-es/_baseIsMap.js","webpack://ksuduo/./node_modules/lodash-es/isSet.js","webpack://ksuduo/./node_modules/lodash-es/_baseIsSet.js","webpack://ksuduo/./node_modules/lodash-es/_baseClone.js","webpack://ksuduo/./node_modules/lodash-es/_copyArray.js","webpack://ksuduo/./node_modules/lodash-es/_initCloneObject.js","webpack://ksuduo/./node_modules/lodash-es/_copySymbolsIn.js","webpack://ksuduo/./node_modules/lodash-es/_baseAssignIn.js","webpack://ksuduo/./node_modules/lodash-es/_copySymbols.js","webpack://ksuduo/./node_modules/lodash-es/_baseAssign.js","webpack://ksuduo/./node_modules/lodash-es/_arrayEach.js","webpack://ksuduo/./src/utility/pickRandom.ts","webpack://ksuduo/./src/solver/solver.ts","webpack://ksuduo/./src/model/Sudoku.ts","webpack://ksuduo/./node_modules/lodash-es/cloneDeep.js","webpack://ksuduo/./src/utility/arraysEqualSimple.ts","webpack://ksuduo/./src/generator/generator.ts","webpack://ksuduo/./src/worker/sudoku.worker.ts"],"names":["check","puzzle","number","index","start","CHUNK_SIZE","Math","floor","i","checkRow","checkCol","check3x3","iterations","recursiveSolve","maxIterations","Error","ROW_COL_SIZE","module","exports","options","opts","emptyValue","hintCheck","outputArray","undefined","Object","assign","split","Array","isArray","TypeError","length","hints","map","element","parseInt","value","isNaN","join","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","CellValue","EXCLUDE_NOTHING","numOfPossibleCellValues","values","CellValues","entries","slice","entry","cellIsEmpty","cell","EMPTY","expr","msg","arrayChunk","arr","chunkSize","res","pos","push","blockIndex","this","cells","getRows","BLOCK_WIDTH","other","array","key","splice","prototype","ListCache","clear","set","__data__","size","data","pop","call","get","has","global","freeSelf","self","Function","objectProto","hasOwnProperty","nativeObjectToString","toString","symToStringTag","isOwn","tag","unmasked","e","result","type","uid","maskSrcKey","exec","funcToString","func","reIsHostCtor","reIsNative","RegExp","replace","test","object","Hash","MapCache","Stack","pairs","LARGE_ARRAY_SIZE","objValue","source","props","customizer","isNew","newValue","propertyIsEnumerable","arguments","freeExports","nodeType","freeModule","Buffer","isBuffer","reIsUint","typedArrayTags","freeProcess","require","types","binding","nodeIsTypedArray","inherited","isArr","isArg","isBuff","isType","skipIndexes","n","iteratee","String","Ctor","constructor","transform","arg","keys","isProto","allocUnsafe","nativeGetSymbols","getOwnPropertySymbols","predicate","resIndex","symbol","offset","getPrototypeOf","keysFunc","symbolsFunc","promiseTag","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","ctorString","arrayBuffer","byteLength","reFlags","symbolProto","symbolValueOf","valueOf","isDeep","regexp","dataView","buffer","byteOffset","typedArray","lastIndex","objectCreate","create","proto","nodeIsMap","nodeIsSet","cloneableTags","baseClone","bitmask","stack","isFlat","isFull","input","isFunc","copy","stacked","forEach","subValue","add","random","SOLVERS","mattsSolver","solve","sudoku","solver","MATTFLOW","solveWithMattsSolver","FOO","Sudoku","getFlatValues","val","cellVal","solution","BOARD_SIZE","fill","v","pow","flatIndexToCoords","coordsToFlatIndex","x","y","structuredCloneInializer","rows","history","initializeEmptyBoard","setSolution","getSolution","clearHistory","isHistoryEmpty","showSolution","getCell","filter","isInitial","solutionData","setValue","getValueFromSolution","initWithNumbers","initWithFlatCellData","setCell","undo","getNumberOfFilledCells","getFilledCells","getFlatCells","addCell","isValid","fillWithRandomCompleteSolution","itsUnsolvable","row","getAllowedCellValue","fixed","useHistory","newCell","freeze","reduce","prev","curr","concat","cellData","getBlocks","blocks","numberOfBlocks","BlockData","chunk","chunkIndex","blockIndexForChunk","block","leftTopX","leftTopY","getColumn","colIndex","rowIndex","Number","isEmpty","getEmptyCells","getValue","getRow","getRowValues","excludeCol","getColumnValues","excludeRow","getRandomEmptyOrInvalidCell","isSolved","find","getAllowedCellValuesByCoords","getAllowedCellValues","ignoreSelf","includes","getFlatBlockValuesForCoords","getFlatBlockValuesForCell","cellX","cellY","excludeSelf","x0","y0","j","isCellValueValid","cellValue","isCellValid","every","getInitialFocusCell","reset","hasSolutionSet","arraysEqualSimple","arr1","arr2","DIFFICULTY_LEVEL","hasMultipleSolutionsOrIsUnsolvable","board","flatPuzzle","InitiallyUnsolvableError","cellValuePossibilities","Map","emptyCells","deadEndCount","newLegalValue","currentFlatIndex","indexOf","clearCellButOnlyIfSolutionsDontExplode","difficulty","candidates","cellValuePossibilityMap","HARD","getCellToClearWithDifficulty","isAmbiguousOrInterestinglyUnsolvable","cellToAdd","flatIndex","MEDIUM","EASY","candDataDescByPoss","indexInCandidates","sort","a","b","candData","WORKER_ACTIONS","ctx","addEventListener","msgEvent","SOLVE","postMessage","GENERATE","numberOfClues","target","achievedNumberOfEmptyCells","it","numberOfDeleteTries","console","error","generateRandomSudoku","TEST"],"mappings":"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","file":"sudoku.worker.worker.js","sourcesContent":["'use-strict';\n\nvar CHUNK_SIZE = 3;\nvar ROW_COL_SIZE = CHUNK_SIZE * CHUNK_SIZE;\nvar SIZE = ROW_COL_SIZE * ROW_COL_SIZE;\n\nvar MIN_HINTS = 17;\n\nfunction checkRow(puzzle, number, index) {\n  var start = Math.floor(index / ROW_COL_SIZE) * ROW_COL_SIZE;\n  for (var i = 0; i < ROW_COL_SIZE; i += 1) {\n    if (puzzle[start + i] === number) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction checkCol(puzzle, number, index) {\n  var start = index % ROW_COL_SIZE;\n  for (var i = 0; i < ROW_COL_SIZE; i += 1) {\n    if (puzzle[start + (i * ROW_COL_SIZE)] === number) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction check3x3(puzzle, number, index) {\n  var start = index - ((index % ROW_COL_SIZE) % CHUNK_SIZE) -\n    (ROW_COL_SIZE * (Math.floor(index / ROW_COL_SIZE) % CHUNK_SIZE));\n  for (var i = 0; i < ROW_COL_SIZE; i += 1) {\n    if (\n      puzzle[start + (ROW_COL_SIZE * Math.floor(i / CHUNK_SIZE)) + (i % CHUNK_SIZE)] === number\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction check(puzzle, number, index) {\n  return checkRow(puzzle, number, index) &&\n        checkCol(puzzle, number, index) &&\n        check3x3(puzzle, number, index);\n}\n\nvar iterations = 0;\nfunction recursiveSolve(puzzle, index, maxIterations) {\n  if (maxIterations !== 0 && ++iterations > maxIterations) {\n    throw new Error('Max iterations reached. No solution found.');\n  }\n  if (index >= SIZE) {\n    return true;\n  } else if (puzzle[index] !== 0) {\n    return recursiveSolve(puzzle, index + 1, maxIterations);\n  }\n\n  for (var number = 1; number <= ROW_COL_SIZE; number += 1) {\n    if (check(puzzle, number, index)) {\n      puzzle[index] = number;\n      if (recursiveSolve(puzzle, index + 1, maxIterations)) {\n        return true;\n      }\n    }\n  }\n  puzzle[index] = 0;\n  return false;\n}\n\nfunction solve(puzzle, options) {\n  var opts = {\n    emptyValue: '0',\n    hintCheck: true,\n    outputArray: false,\n    maxIterations: 1<<20,\n  };\n\n  if (options !== undefined) {\n    Object.assign(opts, options);\n  }\n\n  if (typeof puzzle === 'string') {\n    puzzle = puzzle.split('');\n  }\n\n  if (!Array.isArray(puzzle)) {\n    throw new TypeError('Puzzle must be string or array.');\n  }\n\n  if (puzzle.length !== SIZE) {\n    throw new Error('Puzzle is an invalid size.');\n  }\n\n  var hints = 0;\n  puzzle = puzzle.map(function(element) {\n    if (element === opts.emptyValue || element === parseInt(opts.emptyValue, 10)) {\n      return 0;\n    }\n    hints++;\n    var value = parseInt(element, 10);\n    if (isNaN(value) || value > 9 || value < 1) {\n      throw new TypeError('Invalid puzzle value: ' + element);\n    }\n    return value;\n  });\n\n  if (opts.hintCheck && hints < MIN_HINTS) {\n    throw new Error('A valid puzzle must have at least ' + MIN_HINTS + ' hints.');\n  }\n\n  if (!recursiveSolve(puzzle, 0, opts.maxIterations)) {\n    throw new Error('Puzzle could not be solved.');\n  }\n\n  return opts.outputArray ? puzzle : puzzle.join('');\n}\n\nmodule.exports = solve;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import {CellIndex} from \"./Sudoku\";\r\n\r\nexport const EMPTY_CELL_VALUE: null = null;\r\n\r\nexport enum CellValue {\r\n    EMPTY = 0,\r\n    ONE = 1,\r\n    TWO,\r\n    THREE,\r\n    FOUR,\r\n    FIVE,\r\n    SIX,\r\n    SEVEN,\r\n    EIGHT,\r\n    NINE\r\n}\r\n\r\n/**\r\n * never again will I be so stupid to check\r\n * `if (excludeColumn)` expecting an index or false.\r\n * I am converted (ha ha). Never use type coercion in if statements\r\n * (except when checking for object/array existance)\r\n */\r\nexport const EXCLUDE_NOTHING = false;\r\n\r\n\r\nconst CellValueEnumAsArray = Object.values(CellValue);\r\nconst numOfPossibleCellValues = CellValueEnumAsArray.length / 2;\r\n\r\nexport const CellValues: CellValue[] = Object.entries(CellValue).slice(numOfPossibleCellValues).map(entry => entry[1]) as CellValue[];\r\n\r\nexport const cellIsEmpty = (cell: CellData): boolean => cell.value === CellValue.EMPTY;\r\n\r\nexport type CellData = {\r\n    value: CellValue,\r\n    x: CellIndex,\r\n    y: CellIndex,\r\n    isInitial: boolean,\r\n    isValid: boolean,\r\n}\r\n\r\n// constructor(value: CellValue, x: CellIndex, y: CellIndex, isInitial = false) {\r\n//     this.value = value;\r\n//     this.x = x;\r\n//     this.y = y;\r\n//     this.isInitial = isInitial;\r\n//     this.isValid = true\r\n// }\r\n","export default function assert(expr: boolean, msg: string | undefined = undefined): void {\r\n    if (!expr) {\r\n        throw new Error(msg ?? 'Assertion error')\r\n    }\r\n}\r\n\r\nexport function assertType<T>(subject: any): void {\r\n    if ((subject as T) === undefined) {\r\n        throw new TypeError();\r\n    }\r\n}","import assert from \"./assert\";\r\n\r\nexport default function arrayChunk(arr: any[], chunkSize: number): any[][] {\r\n    assert(Math.floor(chunkSize) === chunkSize && chunkSize > 0);\r\n    const res = [];\r\n    let pos = 0;\r\n    while (pos < arr.length) {\r\n        res.push(arr.slice(pos, chunkSize + pos));\r\n        pos += chunkSize;\r\n    }\r\n    return res;\r\n}","import {BLOCK_WIDTH, CellIndex} from \"./Sudoku\";\r\nimport {CellData} from \"./CellData\";\r\nimport arrayChunk from \"../utility/arrayChunk\";\r\n\r\nexport class BlockData {\r\n    public leftTopX: CellIndex;\r\n    public leftTopY: CellIndex;\r\n    public cells: CellData[];\r\n    public blockIndex: number;\r\n\r\n    constructor(blockIndex: number) {\r\n        this.cells = [];\r\n        this.blockIndex = blockIndex;\r\n    }\r\n\r\n    public getRows(): CellData[][] {\r\n        return arrayChunk(this.cells, BLOCK_WIDTH);\r\n    }\r\n}","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nexport default listCacheClear;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","import eq from './eq.js';\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nexport default assocIndexOf;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nexport default listCacheDelete;\n","import listCacheClear from './_listCacheClear.js';\nimport listCacheDelete from './_listCacheDelete.js';\nimport listCacheGet from './_listCacheGet.js';\nimport listCacheHas from './_listCacheHas.js';\nimport listCacheSet from './_listCacheSet.js';\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nexport default ListCache;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nexport default listCacheGet;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nexport default listCacheHas;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nexport default listCacheSet;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nexport default nativeCreate;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nexport default hashGet;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nexport default hashHas;\n","import hashClear from './_hashClear.js';\nimport hashDelete from './_hashDelete.js';\nimport hashGet from './_hashGet.js';\nimport hashHas from './_hashHas.js';\nimport hashSet from './_hashSet.js';\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nexport default Hash;\n","import nativeCreate from './_nativeCreate.js';\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nexport default hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default hashDelete;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nexport default hashSet;\n","import isKeyable from './_isKeyable.js';\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nexport default getMapData;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nexport default isKeyable;\n","import mapCacheClear from './_mapCacheClear.js';\nimport mapCacheDelete from './_mapCacheDelete.js';\nimport mapCacheGet from './_mapCacheGet.js';\nimport mapCacheHas from './_mapCacheHas.js';\nimport mapCacheSet from './_mapCacheSet.js';\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nexport default MapCache;\n","import Hash from './_Hash.js';\nimport ListCache from './_ListCache.js';\nimport Map from './_Map.js';\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nexport default mapCacheClear;\n","import getMapData from './_getMapData.js';\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default mapCacheDelete;\n","import getMapData from './_getMapData.js';\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nexport default mapCacheGet;\n","import getMapData from './_getMapData.js';\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nexport default mapCacheHas;\n","import getMapData from './_getMapData.js';\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nexport default mapCacheSet;\n","import ListCache from './_ListCache.js';\nimport stackClear from './_stackClear.js';\nimport stackDelete from './_stackDelete.js';\nimport stackGet from './_stackGet.js';\nimport stackHas from './_stackHas.js';\nimport stackSet from './_stackSet.js';\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nexport default Stack;\n","import ListCache from './_ListCache.js';\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nexport default stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nexport default stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nexport default stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nexport default stackHas;\n","import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;\n","import getNative from './_getNative.js';\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nexport default defineProperty;\n","import defineProperty from './_defineProperty.js';\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nexport default baseAssignValue;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignValue;\n","import assignValue from './_assignValue.js';\nimport baseAssignValue from './_baseAssignValue.js';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nexport default copyObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","import baseTimes from './_baseTimes.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isIndex from './_isIndex.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default arrayLikeKeys;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","import isObject from './isObject.js';\nimport isPrototype from './_isPrototype.js';\nimport nativeKeysIn from './_nativeKeysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeysIn;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default nativeKeysIn;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeysIn from './_baseKeysIn.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nexport default keysIn;\n","import root from './_root.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nexport default stubArray;\n","import arrayFilter from './_arrayFilter.js';\nimport stubArray from './stubArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nexport default getSymbols;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","import arrayPush from './_arrayPush.js';\nimport getPrototype from './_getPrototype.js';\nimport getSymbols from './_getSymbols.js';\nimport stubArray from './stubArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nexport default getSymbolsIn;\n","import arrayPush from './_arrayPush.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbols from './_getSymbols.js';\nimport keys from './keys.js';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nexport default getAllKeysIn;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nexport default Uint8Array;\n","import Uint8Array from './_Uint8Array.js';\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nexport default cloneArrayBuffer;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","import Symbol from './_Symbol.js';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\nimport cloneDataView from './_cloneDataView.js';\nimport cloneRegExp from './_cloneRegExp.js';\nimport cloneSymbol from './_cloneSymbol.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nexport default cloneTypedArray;\n","import isObject from './isObject.js';\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nexport default baseCreate;\n","import baseIsMap from './_baseIsMap.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nexport default isMap;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nexport default baseIsMap;\n","import baseIsSet from './_baseIsSet.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nexport default isSet;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nexport default baseIsSet;\n","import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\nimport keysIn from './keysIn.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nexport default copyArray;\n","import baseCreate from './_baseCreate.js';\nimport getPrototype from './_getPrototype.js';\nimport isPrototype from './_isPrototype.js';\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nexport default initCloneObject;\n","import copyObject from './_copyObject.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nexport default copySymbolsIn;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nexport default baseAssignIn;\n","import copyObject from './_copyObject.js';\nimport getSymbols from './_getSymbols.js';\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","import copyObject from './_copyObject.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","/**\r\n * pick a random array value. note that the domain of Math.random() does NOT include 1,\r\n * so for a correct distribution (disregarding the bad PRNG), NEVER subtract 1 from arr.length.\r\n * @param arr\r\n */\r\nexport default function pickRandomArrayValue<T>(arr: T[]): T|undefined {\r\n    if (!arr.length) return undefined;\r\n    return arr[Math.floor(Math.random() * arr.length)];\r\n}","import {BOARD_SIZE, Sudoku} from \"../model/Sudoku\";\r\nimport assert from \"../utility/assert\";\r\nimport {CellValue} from \"../model/CellData\";\r\n\r\nexport type Puzzle = Sudoku | CellValue[] | number[];\r\n\r\nlet mattsSolver = require('@mattflow/sudoku-solver/index');\r\n\r\n/**\r\n * This function should return all solutions to a sudoku, or an empty array\r\n * if it is not solvable.\r\n * @param sudoku\r\n * @param solver\r\n */\r\nexport function solve(sudoku: Puzzle, solver: SOLVERS = SOLVERS.MATTFLOW): Solution {\r\n    switch (solver) {\r\n        case SOLVERS.MATTFLOW:\r\n            return solveWithMattsSolver(sudoku);\r\n        case SOLVERS.FOO:\r\n            return [];\r\n        default:\r\n            throw new Error()\r\n    }\r\n}\r\n\r\nexport enum SOLVERS {\r\n    MATTFLOW,\r\n    FOO\r\n}\r\n\r\nexport type Solution = CellValue[];\r\n\r\nexport function solveWithMattsSolver(sudoku: Sudoku | CellValue[], maxIterations = 1 << 20): Solution {\r\n    try {\r\n        const values = sudoku instanceof Sudoku ? sudoku.getFlatValues().map(val => val as number) :\r\n            sudoku.map(cellVal => cellVal as number);\r\n        const solution: number[] = mattsSolver(\r\n            values,\r\n            {outputArray: true, maxIterations}\r\n        );\r\n        assert(solution.length === BOARD_SIZE);\r\n        return solution;\r\n    } finally {\r\n        //solver holds internal state and needs a re-init if it fails\r\n        mattsSolver = require('@mattflow/sudoku-solver/index');\r\n    }\r\n}","import {CellData, cellIsEmpty, CellValue, CellValues, EXCLUDE_NOTHING} from \"./CellData\";\r\nimport {BlockData} from \"./BlockData\";\r\nimport arrayChunk from \"../utility/arrayChunk\";\r\nimport {cloneDeep} from \"lodash-es\";\r\nimport pickRandomArrayValue from \"../utility/pickRandom\";\r\nimport assert from \"../utility/assert\";\r\nimport {Solution, solve} from \"../solver/solver\";\r\n\r\nexport type CellIndex = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;\r\n\r\n//All possible cell indices on x- or y-axis, meaning [0,1,...,8]\r\nexport const CELL_INDICES =\r\n    Array(9).fill(0).map((v, i) => i as CellIndex);\r\n\r\nexport const BOARD_WIDTH = CELL_INDICES.length;\r\nexport const BOARD_SIZE = Math.pow(BOARD_WIDTH, 2);\r\nexport const BLOCK_WIDTH = 3;\r\n\r\nexport const flatIndexToCoords = (index: number): [CellIndex, CellIndex] => {\r\n    const x = index % BOARD_WIDTH as CellIndex;\r\n    const y = Math.floor(index / BOARD_WIDTH) as CellIndex;\r\n    return [x, y];\r\n}\r\n\r\nexport const coordsToFlatIndex = (x: CellIndex, y: CellIndex): number => {\r\n    return y * BOARD_WIDTH + x;\r\n}\r\n\r\nexport class CouldNotSolveSudokuPassedToConstructorError extends Error {\r\n\r\n}\r\n\r\n/**\r\n * We rely on the structured clone algorithm to result in this type when serializing a\r\n * {@link Sudoku} instance.\r\n *\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm\r\n */\r\nexport class SudokuStructuredClone {\r\n    rows: CellData[][];\r\n    solution: Solution;\r\n    history: CellData[][];\r\n}\r\n\r\nexport class Sudoku {\r\n    /**\r\n     * main source of truth.\r\n     * @private\r\n     */\r\n    private readonly rows: CellData[][];\r\n\r\n    /**\r\n     * history stored as array of flat board states (2nd dimension contains Array(81)<CellData>).\r\n     * history is only filled for user input and hints and cleared on reset.\r\n     */\r\n    public history: CellData[][];\r\n\r\n    private solution: Solution = [];\r\n\r\n    constructor(structuredCloneInializer?: SudokuStructuredClone) {\r\n        if (structuredCloneInializer) {\r\n            this.rows = structuredCloneInializer.rows;\r\n            this.solution = structuredCloneInializer.solution;\r\n            this.history = structuredCloneInializer.history;\r\n        } else {\r\n            this.rows = [];\r\n            this.history = [];\r\n            this.initializeEmptyBoard();\r\n        }\r\n    }\r\n\r\n    public setSolution(solution: Solution) {\r\n        this.solution = solution;\r\n    }\r\n\r\n    public getSolution(): Solution {\r\n        return this.solution;\r\n    }\r\n\r\n    public clearHistory(): void {\r\n        this.history.length = 0;\r\n    }\r\n\r\n    public isHistoryEmpty(): boolean {\r\n        return this.history.length === 0;\r\n    }\r\n\r\n    public showSolution(): void {\r\n\r\n        for (let solutionData of this.getSolution().map(\r\n            (val, index) =>\r\n                ({\r\n                    cell: this.getCell(...flatIndexToCoords(index)),\r\n                    val\r\n                })\r\n        ).filter(data => !data.cell.isInitial)) {\r\n            this.setValue(solutionData.cell.x, solutionData.cell.y, solutionData.val, false, false);\r\n        }\r\n    }\r\n\r\n    public getValueFromSolution(x: CellIndex, y: CellIndex): CellValue | undefined {\r\n        if (this.solution !== undefined) {\r\n            return this.solution[coordsToFlatIndex(x, y)];\r\n        }\r\n    }\r\n\r\n    public initWithNumbers(values: number[]) {\r\n        values.forEach((value, index) => {\r\n            const [x, y] = flatIndexToCoords(index);\r\n            const cell = this.getCell(x, y);\r\n            cell.value = value;\r\n            if (value as CellValue !== CellValue.EMPTY) {\r\n                cell.isInitial = true;\r\n            }\r\n        });\r\n        try {\r\n            this.solution = solve(values);\r\n        } catch (e) {\r\n            throw e;\r\n        }\r\n\r\n    }\r\n\r\n    public initWithFlatCellData(cells: CellData[]) {\r\n        cells.forEach((cell) => {\r\n            this.setCell(cell, false);\r\n        });\r\n    }\r\n\r\n    public undo() {\r\n        assert(this.history.length > 0, 'Cannot undo, history empty.');\r\n        const values = this.history.pop();\r\n        // cast needed because TypeScript doesn't understand my custom assert()\r\n        // (which guarantees the result of pop() cannot be undefined)\r\n        this.initWithFlatCellData(values as CellData[]);\r\n    }\r\n\r\n    /**\r\n     * Previously, I did this with a dedicated variable keeping track of the filled cells.\r\n     * But this \"functional\" approach is way less error-prone.\r\n     * The many array iterations are not optimized -\r\n     * in practise it does not impact performance at all here. Array chaining methods FTW!\r\n     */\r\n    public getNumberOfFilledCells(): number {\r\n        return this.getFilledCells().length;\r\n    }\r\n\r\n    public getFilledCells(): CellData[] {\r\n        return this.getFlatCells().filter(cell => cell.value !== CellValue.EMPTY);\r\n    }\r\n\r\n    /**\r\n     * Add a cell. The cell object contains its coordinates, if another Cell\r\n     * with the same coordinates is present, it is replaced\r\n     * @param cell\r\n     * @private\r\n     */\r\n    private addCell(cell: CellData) {\r\n        this.rows[cell.y][cell.x] = cell;\r\n    }\r\n\r\n    public initializeEmptyBoard() {\r\n        for (let y = 0; y < BOARD_WIDTH; y++) {\r\n            this.rows[y] = Array(BOARD_WIDTH).fill(null);\r\n            for (let x = 0; x < this.rows[y].length; x++) {\r\n                this.addCell(\r\n                    {\r\n                        value: CellValue.EMPTY,\r\n                        x: x as CellIndex,\r\n                        y: y as CellIndex,\r\n                        isInitial: true,\r\n                        isValid: true\r\n                    } as CellData\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    public fillWithRandomCompleteSolution() {\r\n        let itsUnsolvable = false;\r\n        this.rows.forEach((row, y) => {\r\n            if (itsUnsolvable) {\r\n                return;\r\n            }\r\n            for (let x = 0; x < row.length; x++) {\r\n                const val = this.getAllowedCellValue(x as CellIndex, y as CellIndex);\r\n                if (val === CellValue.EMPTY) {\r\n                    itsUnsolvable = true;\r\n                    break;\r\n                } else {\r\n                    this.setValue(x as CellIndex, y as CellIndex, val, true);\r\n                }\r\n            }\r\n        });\r\n        if (itsUnsolvable) {\r\n            this.initializeEmptyBoard();\r\n            this.fillWithRandomCompleteSolution();\r\n        }\r\n    }\r\n\r\n    public getCell(x: CellIndex, y: CellIndex) {\r\n        return this.rows[y][x];\r\n    }\r\n\r\n    /**\r\n     * set a new cell value by coordinates.\r\n     * The previous cell object is replaced to trigger a re-render.\r\n     * @param x column index\r\n     * @param y row index\r\n     * @param value cell value\r\n     * @param fixed if the cell was part of the initial puzzle\r\n     * @param useHistory if the operation should be saved to history\r\n     */\r\n    public setValue(x: CellIndex, y: CellIndex, value: CellValue, fixed = false, useHistory = true) {\r\n        if (useHistory) {\r\n            this.history.push(this.getFlatCells().slice());\r\n        }\r\n        const cell = this.rows[y][x];\r\n        const newCell = cloneDeep(cell);\r\n        newCell.isInitial = fixed;\r\n        newCell.value = value;\r\n        this.rows[y][x] = newCell;\r\n    }\r\n\r\n    public setCell(cell: CellData, useHistory = true): void {\r\n        this.setValue(cell.x, cell.y, cell.value, cell.isInitial, useHistory);\r\n    }\r\n\r\n    public getRows(): readonly CellData[][] {\r\n        return Object.freeze(this.rows);\r\n    }\r\n\r\n    public getFlatValues(): readonly CellValue[] {\r\n        return this.rows.reduce((prev, curr) => {\r\n            return prev.concat(curr);\r\n        }, []).map(cellData => cellData.value);\r\n    }\r\n\r\n    public getFlatCells(): readonly CellData[] {\r\n        return this.rows.reduce((prev, curr) => {\r\n            return prev.concat(curr);\r\n        }, []);\r\n    }\r\n\r\n    public getBlocks(): BlockData[] {\r\n        const blocks: BlockData[] = [];\r\n        const numberOfBlocks = BOARD_SIZE / Math.pow(BLOCK_WIDTH, 2); //This must result in an int (field is a square).\r\n        for (let i = 0; i < numberOfBlocks; i++) {\r\n            blocks.push(new BlockData(i));\r\n        }\r\n        for (let i = 0; i < this.rows.length; i++) {\r\n            const chunks: CellData[][] = arrayChunk(this.rows[i], BLOCK_WIDTH);\r\n            chunks.forEach((chunk, chunkIndex) => {\r\n                const blockIndexForChunk = Math.floor(i / BLOCK_WIDTH) * BLOCK_WIDTH + chunkIndex;\r\n                const block = blocks[blockIndexForChunk];\r\n                block.cells.push(...chunk);\r\n                block.leftTopX = chunkIndex * BLOCK_WIDTH as CellIndex;\r\n                block.leftTopY = (Math.floor(i / BLOCK_WIDTH) * BLOCK_WIDTH) as CellIndex;\r\n            });\r\n        }\r\n        return blocks;\r\n    }\r\n\r\n    /**\r\n     * To do: cache this. (??? or maybe not. )\r\n     */\r\n    public getColumn(): readonly CellData[][] {\r\n        if (this.rows !== undefined) {\r\n            return Object.keys(this.rows[0]).map(\r\n                colIndex => {\r\n                    return Object.keys(this.rows)\r\n                        .map(\r\n                            rowIndex => this.rows[Number(rowIndex) as CellIndex]\r\n                                [Number(colIndex) as CellIndex]\r\n                        )\r\n                }\r\n            )\r\n        }\r\n        return [];\r\n    }\r\n\r\n    public isEmpty(): boolean {\r\n        return this.getEmptyCells().length === BOARD_SIZE;\r\n    }\r\n\r\n    // noinspection JSUnusedLocalSymbols\r\n    /**\r\n     *\r\n     * @param x\r\n     * @param y\r\n     * @private\r\n     * @deprecated\r\n     */\r\n    private getValue(x: CellIndex, y: CellIndex): CellValue {\r\n        return this.rows[y][x].value;\r\n    }\r\n\r\n    public getRow(y: CellIndex): CellData[] {\r\n        return this.rows[y];\r\n    }\r\n\r\n    public getRowValues(y: CellIndex, excludeCol: CellIndex | false = EXCLUDE_NOTHING): CellValue[] {\r\n        if (excludeCol !== EXCLUDE_NOTHING) {\r\n            return this.getRow(y)\r\n                .filter((v, i) => i as CellIndex !== excludeCol)\r\n                .map(cell => cell.value);\r\n\r\n        }\r\n        return this.getRow(y).map(cell => cell.value);\r\n    }\r\n\r\n    public getColumnValues(x: CellIndex, excludeRow: CellIndex | false = EXCLUDE_NOTHING): CellValue[] {\r\n        if (excludeRow !== false) {\r\n            return Object.keys(this.rows)\r\n                .filter(i => Number(i) as CellIndex !== excludeRow)\r\n                .map(\r\n                    rowIndex => this.rows[+rowIndex as CellIndex][x].value\r\n                )\r\n        }\r\n        return Object.keys(this.rows)\r\n            .map(\r\n                rowIndex => this.rows[+rowIndex as CellIndex][x].value\r\n            )\r\n    }\r\n\r\n    public getEmptyCells(): CellData[] {\r\n        return this.getFlatCells().filter(cell => cellIsEmpty(cell));\r\n    }\r\n\r\n    public getRandomEmptyOrInvalidCell(): CellData {\r\n        assert(!this.isSolved(), \"Sudoku is already completed, there are no empty cells\");\r\n        const res = pickRandomArrayValue(this.getEmptyCells()) ||\r\n            this.getFlatCells().find(cell => !cell.isValid);\r\n        if (!res) {\r\n            throw new Error(\"Oops, no invalid cells, no empty cells and not solved??\")\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public getAllowedCellValue(x: CellIndex, y: CellIndex): CellValue {\r\n        return pickRandomArrayValue(this.getAllowedCellValuesByCoords(x, y)) || CellValue.EMPTY;\r\n    }\r\n\r\n    public getAllowedCellValues(cell: CellData): CellValue[] {\r\n        return this.getAllowedCellValuesByCoords(cell.x, cell.y);\r\n    }\r\n\r\n    public getAllowedCellValuesByCoords(x: CellIndex, y: CellIndex, ignoreSelf = false): CellValue[] {\r\n        return CellValues.filter(\r\n            value => !(\r\n                value === CellValue.EMPTY ||\r\n                this.getRowValues(y, ignoreSelf ? x : EXCLUDE_NOTHING).includes(value) ||\r\n                this.getColumnValues(x, ignoreSelf ? y : EXCLUDE_NOTHING).includes(value)\r\n                || this.getFlatBlockValuesForCoords(x, y, ignoreSelf).includes(value)\r\n            )\r\n        );\r\n    }\r\n\r\n    // noinspection JSUnusedLocalSymbols\r\n    private getFlatBlockValuesForCell(cell: CellData) {\r\n        return this.getFlatBlockValuesForCoords(cell.x, cell.y);\r\n    }\r\n\r\n    private getFlatBlockValuesForCoords(cellX: CellIndex, cellY: CellIndex, excludeSelf = false): CellValue[] {\r\n        //find top left block corner\r\n        let x0 = cellX;\r\n        let y0 = cellY;\r\n        while (x0 % 3 !== 0) {\r\n            x0--;\r\n        }\r\n        while (y0 % 3 !== 0) {\r\n            y0--;\r\n        }\r\n        //add 9 values\r\n        const res: CellValue[] = [];\r\n        for (let i = 0; i < 3; i++) {\r\n            for (let j = 0; j < 3; j++) {\r\n                const x = (x0 + j) as CellIndex;\r\n                const y = (y0 + i) as CellIndex;\r\n                if (excludeSelf && y === cellY && x === cellX) {\r\n                    continue;\r\n                }\r\n                try {\r\n                    res.push(this.rows[y][x].value);\r\n                } catch {\r\n                    debugger;\r\n                }\r\n\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private isCellValueValid(cellValue: CellValue, x: CellIndex, y: CellIndex) {\r\n        return cellValue === CellValue.EMPTY ||\r\n            !(this.getRowValues(y, x).includes(cellValue) ||\r\n                this.getColumnValues(x, y).includes(cellValue)\r\n                || this.getFlatBlockValuesForCoords(x, y, true).includes(cellValue)\r\n            );\r\n    }\r\n\r\n    public isCellValid(cell: CellData): boolean {\r\n        return cellIsEmpty(cell) || this.isCellValueValid(cell.value, cell.x, cell.y);\r\n    }\r\n\r\n    public isSolved(): boolean {\r\n        return this.getFlatCells().every(\r\n            cell => cell.value !== CellValue.EMPTY && this.isCellValid(cell)\r\n        );\r\n    }\r\n\r\n    public getInitialFocusCell(): CellData {\r\n        let cell;\r\n        let x = 0 as CellIndex, y = 0 as CellIndex;\r\n        cell = this.getCell(x, y);\r\n        while (!cellIsEmpty(cell) && y < BOARD_WIDTH - 1) {\r\n            if (x > BOARD_WIDTH - 1) {\r\n                x = 0;\r\n                y++;\r\n            }\r\n            assert(x < BOARD_WIDTH && y < BOARD_WIDTH, `${x} is not a valid row index and / or ${y} is not a valid col index`);\r\n            cell = this.getCell(x as CellIndex, y as CellIndex);\r\n            x++;\r\n        }\r\n        // assert(cellIsEmpty(cell), 'No empty cell found.');\r\n        if (!cellIsEmpty(cell)) {\r\n            return this.getCell(0, 0);\r\n        }\r\n        return cell;\r\n    }\r\n\r\n    /**\r\n     * Clear user input / hints.\r\n     */\r\n    public reset(): void {\r\n        for (let cell of this.getFlatCells()) {\r\n            if (!cell.isInitial) {\r\n                cell.value = CellValue.EMPTY;\r\n                this.setCell(cell, false);\r\n            }\r\n        }\r\n        this.clearHistory();\r\n    }\r\n\r\n    public hasSolutionSet(): boolean {\r\n        return this.solution.length === BOARD_SIZE;\r\n    }\r\n}\r\n\r\n\r\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","/**\r\n * simple equality test for typed arrays.\r\n * @param arr1\r\n * @param arr2\r\n */\r\nexport default function arraysEqualSimple<T>(arr1: T[], arr2: T[]) {\r\n    return arr1.length === arr2.length &&\r\n        arr1.every((val, index) => arr2[index] === val);\r\n}","/*\r\n * @module SudokuGenerator\r\n */\r\n\r\nimport {BOARD_SIZE, BOARD_WIDTH, CellIndex, coordsToFlatIndex, flatIndexToCoords, Sudoku} from '../model/Sudoku';\r\nimport {CellData, cellIsEmpty, CellValue} from \"../model/CellData\";\r\nimport assert from \"../utility/assert\";\r\nimport intRange from \"../utility/numberRange\";\r\nimport pickRandomArrayValue from \"../utility/pickRandom\";\r\nimport {Solution, solve, solveWithMattsSolver} from \"../solver/solver\";\r\nimport arraysEqualSimple from \"../utility/arraysEqualSimple\";\r\nimport {wait} from \"../utility/debug/synchronousWait\";\r\n\r\nexport const verboseGeneratorExplanationText = `Start with a randomly generated, completely filled board.\r\nThen clear cells one at a time - after each removal, use backtracking:\r\nAdd legal values, then use Sudoku solver to check for differing\r\nsolutions or dead ends.\r\nIf such are found, the cell must not be removed and is reverted.\r\nDifferent legal values are tried for the empty cells in each stage\r\nof the removal process.\r\n\r\nIf no cell can be removed without making the board invalid (multiple solutions),\r\nthe fully completed \"seed\" board is discarded - rinse, repeat until the desired number of cells are cleared.`;\r\n\r\nexport const MINIMUM_CLUES = 17;\r\nexport const DEFAULT_CLUES = Math.floor(BOARD_SIZE / 3) - 3;\r\n\r\nexport enum DIFFICULTY_LEVEL {\r\n    EASY,\r\n    MEDIUM,\r\n    HARD\r\n}\r\n\r\nclass InitiallyUnsolvableError extends Error {\r\n\r\n}\r\n\r\nexport default function generateRandomSudoku(numberOfClues: number, difficulty = DIFFICULTY_LEVEL.EASY): Sudoku {\r\n    if (IS_DEVELOPMENT) {\r\n        wait(500);\r\n    }\r\n    numberOfClues = Math.floor(numberOfClues);\r\n    const target = BOARD_SIZE - numberOfClues;\r\n    let achievedNumberOfEmptyCells = 0;\r\n    const MAX_TOPLEVEL_ITERATIONS = 1 << 8;\r\n    let it = 0;\r\n    let board = new Sudoku();\r\n    while (achievedNumberOfEmptyCells < target && it < MAX_TOPLEVEL_ITERATIONS) {\r\n        // console.log(\"testing a new board. the previous one sucked.\");\r\n        board = new Sudoku();\r\n        let numberOfDeleteTries = 0;\r\n        board.fillWithRandomCompleteSolution();\r\n        board.setSolution(board.getFlatValues() as Solution);\r\n        while (numberOfDeleteTries < (1 << 8)) {\r\n            clearCellButOnlyIfSolutionsDontExplode(board, difficulty);\r\n            achievedNumberOfEmptyCells = BOARD_SIZE - board.getNumberOfFilledCells();\r\n            //for many initial boards it is impossible to delete the desired number of cells without\r\n            //making the board an invalid sudoku (multiple solutions, or not solvable by algo)\r\n            numberOfDeleteTries++;\r\n            if (achievedNumberOfEmptyCells === target) break;\r\n        }\r\n        it++;\r\n    }\r\n    /**\r\n     * history is used in generator for backtracing. after generating, we clear it.\r\n     */\r\n    board.clearHistory();\r\n    if (achievedNumberOfEmptyCells < target) {\r\n        console.error(\"SORRY ;( I couldn't generate a valid Sudoku.\")\r\n    }\r\n    return board;\r\n}\r\n\r\nfunction getCellValuePossibilityMap(board: Sudoku, cells: CellData[]) {\r\n    const cellValuePossibilities = new Map<CellData, CellValue[]>();\r\n    cells.forEach(\r\n        cell => cellValuePossibilities.set(\r\n            cell,\r\n            board.getAllowedCellValues(cell)\r\n        )\r\n    );\r\n    return cellValuePossibilities;\r\n}\r\n\r\n/**\r\n * Try to estimate if a puzzle has multiple solutions. (a valid Sudoku must have only 1 solution).\r\n * Add a legal value to a Puzzle, then check if the solution differs from the original.\r\n * Combinatorial explosion in JavaScript is a GREAT idea, I know <3\r\n */\r\nfunction hasMultipleSolutionsOrIsUnsolvable(board: Sudoku, maxIterations = (1 << 8)): boolean {\r\n    assert(!board.isSolved());\r\n    const flatPuzzle = board.getFlatValues().slice();\r\n    try {\r\n        solve(flatPuzzle)\r\n    } catch (e) {\r\n        /**\r\n         * Already unsolvable without filling any more cells.\r\n         *\"Unsolvable\" means that the algo can't solve it (so a human can't either.)\r\n         * Instead of returning true, we throw a special Error.\r\n         * That's useful because we can cheat in the generator by adding a cell from the solution\r\n         * and removing another cell instead of starting over with a completely fresh board.\r\n         */\r\n        throw new InitiallyUnsolvableError();\r\n    }\r\n    const solution = board.getSolution();\r\n    const cellValuePossibilities = new Map<CellData, CellValue[]>();\r\n    const emptyCells = board.getEmptyCells();\r\n    emptyCells.forEach(\r\n        cell => cellValuePossibilities.set(\r\n            cell,\r\n            board.getAllowedCellValues(cell)\r\n        )\r\n    );\r\n    let deadEndCount = 0;\r\n    for (let i = 0; i < maxIterations && deadEndCount < 100; i++) {\r\n        const cell = pickRandomArrayValue(emptyCells);\r\n        if (!cell) {\r\n            break; //no more cells left (unlikely considering the combinatorial explosion...)\r\n        }\r\n        //cast needed because TypeScript can't analyze the populated Map\r\n        const possibleValuesForThisCell = cellValuePossibilities.get(cell) as CellValue[];\r\n        const newLegalValue = possibleValuesForThisCell.pop();\r\n        if (newLegalValue === undefined) {\r\n            //possible values exhausted, again relatively unlikely.\r\n            //in this case, the cell is not interesting anymore\r\n            emptyCells.splice(emptyCells.indexOf(cell), 1);\r\n            continue;\r\n        }\r\n        const currentFlatIndex = coordsToFlatIndex(cell.x, cell.y);\r\n        //try out a new legal value to test for a new solution.\r\n        flatPuzzle[currentFlatIndex] = newLegalValue;\r\n        try {\r\n            const solutionAfterAdd = solveWithMattsSolver(flatPuzzle);\r\n            //if we found a new solution after adding a legal value,\r\n            //we have multiple solutions and can return!\r\n            if (!arraysEqualSimple(solution, solutionAfterAdd)) {\r\n                // console.log(\"found a 2nd solution, backtracking\")\r\n                return true;\r\n            }\r\n                //if the solution didn't change, we can ignore this possible value and unset it.\r\n                //we assume that a new solution arises from ONE added cell.\r\n            //so we revert the cell to empty if the tested new value didn't lead to a new solution.\r\n            else {\r\n                flatPuzzle[currentFlatIndex] = CellValue.EMPTY;\r\n            }\r\n        } catch (e) {\r\n            //sudoku solver couldn't solve it.\r\n            //I'm not sure yet what to do in this case.\r\n            //It doesn't mean that the puzzle is unsolvable.\r\n            //(you can add lots of legal values that lead to dead ends)\r\n            deadEndCount++;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n// noinspection JSUnusedLocalSymbols\r\n/**\r\n * @deprecated\r\n * @param sudoku\r\n * @param coordsGenerator\r\n */\r\nconst clearRandomCell = (sudoku: Sudoku, coordsGenerator: Generator<CellIndex[]>): void => {\r\n    const generatorResult = coordsGenerator.next();\r\n    if (!generatorResult.done) {\r\n        const coords = generatorResult.value;\r\n        sudoku.setValue(coords[0], coords[1], CellValue.EMPTY, false);\r\n    }\r\n}\r\n\r\nconst clearCellButOnlyIfSolutionsDontExplode = (sudoku: Sudoku, difficulty: DIFFICULTY_LEVEL): void => {\r\n    let maxIterations = 1 << 16;\r\n    const candidates = sudoku.getFilledCells();\r\n    let cellValuePossibilityMap = new Map<CellData, CellValue[]>();\r\n    if (difficulty < DIFFICULTY_LEVEL.HARD) {\r\n        cellValuePossibilityMap = getCellValuePossibilityMap(sudoku, candidates);\r\n    }\r\n    for (let i = 0; i < maxIterations; i++) {\r\n        let cell;\r\n        /**\r\n         * stop considering the number of possibilities in the cells after a while,\r\n         * this leads to nicer boards. Otherwise, the filled cells tend to cluster at the bottom of the\r\n         * board.\r\n         */\r\n        if (candidates.length < (BOARD_SIZE / 3)) {\r\n            cell = pickRandomArrayValue(candidates);\r\n        } else {\r\n            cell = getCellToClearWithDifficulty(candidates, difficulty, cellValuePossibilityMap);\r\n        }\r\n        /**\r\n         * Difficulty level decides which cells we prefer to remove:\r\n         * EASY:   Remove the cell with maximum possible values\r\n         * MEDIUM: Remove the cell with 2nd most possible values (or max. if needed)\r\n         * HARD:   Don't care about the number of possible values when removing cells.\r\n         */\r\n        if (!cell) {\r\n            return;\r\n        }\r\n        //Try to clear the cell. Then we test if the puzzle still (probably) has a unique solution\r\n        sudoku.setValue(cell.x, cell.y, CellValue.EMPTY);\r\n        let isAmbiguousOrInterestinglyUnsolvable: boolean;\r\n        try {\r\n            isAmbiguousOrInterestinglyUnsolvable = hasMultipleSolutionsOrIsUnsolvable(sudoku);\r\n        } catch (e) {\r\n            //swap a removed cell with a cell from the solution\r\n            if (e instanceof InitiallyUnsolvableError) {\r\n                const solutionCellsAlreadyRemoved = sudoku.getSolution().map(\r\n                    (cellValue, flatIndex) => sudoku.getCell(...flatIndexToCoords(flatIndex)))\r\n                    .filter(cell => cellIsEmpty(cell));\r\n                const cellToAdd = pickRandomArrayValue(solutionCellsAlreadyRemoved);\r\n                sudoku.setCell(\r\n                    cellToAdd as CellData, false\r\n                );\r\n                /** no need to remove another cell instead.\r\n                 * the cell we re-added is not in the candidates array anymore,\r\n                 and the loop continues to try removing other cells.*/\r\n            }\r\n            isAmbiguousOrInterestinglyUnsolvable = false;\r\n        }\r\n\r\n        if (isAmbiguousOrInterestinglyUnsolvable) {\r\n            sudoku.undo();\r\n            //seems like we shouldn't remove this cell.\r\n            candidates.splice(candidates.indexOf(cell), 1);\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getCellToClearWithDifficulty(candidates: CellData[], difficulty: DIFFICULTY_LEVEL, cellValuePossibilityMap: Map<CellData, CellValue[]>) {\r\n    let cell;\r\n    switch (difficulty) {\r\n        case DIFFICULTY_LEVEL.HARD:\r\n            cell = pickRandomArrayValue(candidates);\r\n            break;\r\n        case DIFFICULTY_LEVEL.MEDIUM:\r\n        case DIFFICULTY_LEVEL.EASY:\r\n            const candDataDescByPoss = candidates.map((cell, indexInCandidates) => [\r\n                (cellValuePossibilityMap.get(cell) as CellValue[]).length,\r\n                indexInCandidates\r\n            ]).sort((a, b) => {\r\n                return a[0] < b[0] ? 1 : -1\r\n            });\r\n            if (difficulty === DIFFICULTY_LEVEL.MEDIUM && candDataDescByPoss.length > 1) {\r\n                const index = (candDataDescByPoss[candDataDescByPoss.length - 2] as [number, number])[1] || 0;\r\n                cell = candidates[index];\r\n            } else {\r\n                const candData = candDataDescByPoss.pop();\r\n                if (candData !== undefined) {\r\n                    cell = candidates[candData[1]];\r\n                } else {\r\n                    cell = pickRandomArrayValue(candidates);\r\n                }\r\n            }\r\n            break;\r\n        default:\r\n            cell = pickRandomArrayValue(candidates);\r\n            break;\r\n    }\r\n    return cell;\r\n}\r\n\r\n\r\n// noinspection JSUnusedLocalSymbols\r\n/**\r\n * Generator for random index pair in specified range.\r\n * Tried a generator here because we never want to select a coord pair twice. (except when infinite=true)\r\n * @param max\r\n * @param min\r\n * @param infinite\r\n * @deprecated\r\n */\r\nfunction* randomCoordinatesGenerator(infinite = false,\r\n                                     max: number = BOARD_WIDTH - 1,\r\n                                     min: number = 0): Generator<[CellIndex, CellIndex]> {\r\n    max = Math.floor(max);\r\n    min = Math.floor(min);\r\n    assert(max > min);\r\n    const range = intRange(min, max);\r\n\r\n    function makeCoords(): [CellIndex, CellIndex] {\r\n        return [\r\n            pickRandomArrayValue(range) as CellIndex,\r\n            pickRandomArrayValue(range) as CellIndex\r\n        ];\r\n    }\r\n\r\n    const usedCoords: string[] = [];\r\n    const coordsSpaceSize = Math.pow(max - min, 2);\r\n    while (true) {\r\n        if (usedCoords.length >= coordsSpaceSize) {\r\n            if (infinite) {\r\n                usedCoords.length = 0;\r\n            } else return;\r\n        }\r\n        let coords = makeCoords();\r\n        while (usedCoords.includes(coords.join())) {\r\n            coords = makeCoords();\r\n        }\r\n        usedCoords.push(coords.join());\r\n        yield coords;\r\n    }\r\n}\r\n","import generateRandomSudoku from \"../generator/generator\";\r\nimport {solve} from \"../solver/solver\";\r\n\r\nconst ctx: Worker = self as any;\r\n\r\nexport enum WORKER_ACTIONS {\r\n    SOLVE,\r\n    GENERATE,\r\n    TEST\r\n}\r\n\r\nexport const MSGEVT_SOURCE = 'ksuduo';\r\n\r\nctx.addEventListener(\"message\", (msgEvent: MessageEvent) => {\r\n    if (msgEvent.data.source !== MSGEVT_SOURCE) return;\r\n    switch (msgEvent.data.data[0]) {\r\n        case WORKER_ACTIONS.SOLVE:\r\n            ctx.postMessage(\r\n                solve(msgEvent.data.data[1])\r\n            )\r\n            break;\r\n        case WORKER_ACTIONS.GENERATE:\r\n            const sudoku = generateRandomSudoku(msgEvent.data.data[1]);\r\n            ctx.postMessage(sudoku);\r\n            break;\r\n        case WORKER_ACTIONS.TEST:\r\n            ctx.postMessage(\"Test successful.\");\r\n            break;\r\n        default:\r\n            console.error(msgEvent);\r\n            throw new Error(\"Could not process message\")\r\n    }\r\n});\r\n"],"sourceRoot":""}